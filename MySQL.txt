



What is a database-- data base is a collection of data and holds the data in the form of tables.
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------


What is a table --- holds the data in form of rows and columns.
---------------------------------------------------------------
---------------------------------------------------------------


It is similar to excel spreadsheet.
-----------------------------------
-----------------------------------
When a excel spreadsheet holds the data in the same way why do we require this database?

Problem with excel spreadsheet is it what if let's say 1000s of spreadsheets which hold more than 100000s of data
it become very tidious and cumbersome and totally unmanageable to give insights to this huge data. This is why the better
 way is to have a database and it will provide you n number of other functionalities also.

-------------

The database provides us the capability to access and manipulate this data.
---------------------------------------------------------------------------
---------------------------------------------------------------------------


Because storing the data is not the only thing we should be able to interact with this data 
we should be able to retrieve the data we should be able to update or modify the data 
whatever we want we should be able to and these are the one of the capabalities which our database will provide us.





2 types of databases
----------------------
----------------------

1. Relational Database - A reletional database is the one in which we store the data 
in the form of   rows & columns and also the tables have relation between them.
For ex we might have employee id and departments table and each employee can have a department id 
which relate them to that employee table which means two tables will have some relation on them.
that's why we called it a relational database.

MySQL
SQL Server
PostgreSQL

SQLite
MariaDB

2. NOSQL Database -- is the one where we have a Key value, Document, Graph  
here the data is not stored in the form of rows and columns and also two tables do not have any relation in them

Hbase
Mongodb
Cassandra
------------------------

--------



why My sql

it is something which is used in lot of places. it is in very high demand that is why we are going to learn this 

what if anyone ask to work on sql server or postgreSQL I would say you would not have to really worry the sql staements 
learned with this class should work on other databases like sql server,  with minor changes.

------------------------------------------------------------------------
----------------------------------------------------------------------------


SQL ---> SQL stands for structure query language -
Because this language is used to work with structured data that is data in the form of rows and columns.

SQL is a language through which we are interacting with the databases.
So basically sql is a language through which you will be interacting with the databases.


For ex --- we have a mysql data and someone says write a query to insert the data.
or to update the record or to delete the record from their MySQL database  

So MySQL is a database and SQL is a way to interact with this database. You can say to communicate with the database.


--------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
SQL - s used to query a relational database.



goormide
Online -----https://ide.goorm.io/my/dashboard


create container

name mysql
region - india

select npde.js

install mysql
run container
 
enable mysql-ctl cli;      command ---pta karo
Windows: Press Ctrl + L to clear the MySQL command line on Windows systems. 
MacOS: Press Cmd + K to clear the MySQL command line on MacOS. 
Linux: Press Ctrl + L to clear the MySQL command line on Linux



SHOW DATABASES;

CREATE DATABASE ITPLC;

DROP DATABASE ITPLC;

USE ITPLC

SELECT DATABASE

CREATE TABLE employee
(
name VARCHAR(30),
age INT,
salary FLOAT
);


SHOW TABLES;

------------------------------------------------------------------
-------------------------------------------------------------------

DESCRIBE employee; ---- gives structure of the table 

even 

DESC employee;

Will work the same way. -- type less


 
DROP TABLE employee;

SHOW TABLE;
---------------------------------------------------------


DATABASE is for storing the data
Relational vs NOSQL database ---> 
SQL
MySQL vs  SQL
we get some pratcise to how to create a database and how to create a table, Basic data types,
DROP TABLE, DROP DATABASE, DESCRIBE.



-------------------------------------------------
---------------------------------------------------

CRUD Operations 

create --> means creating the new records.--> INSERT statement
read -->  once the data is in the table we are reading it --> SELECT statements
update --> means updating the record --> UPDATE statements
delete --> means deleting a record --> DELETE statements


Creation of table and insert statements.


CREATE TABLE employee (
firstname VARCHAR(20),
middlename VARCHAR(20),
lastname VARCHAR(20),
age INT,
salary INT,
location VARCHAR(20)
);
------- THIS is called DDL- data definition language.

DESC employee;


SELECT * FROM employee;


INSERT INTO employee(firstname, middlename, lastname, age, salary, location)
 VALUES('Kapil', 'kumar', 'sharma', 
28, 10000, 'Bangalore');

SELECT * FROM employee;


INSERT INTO employee(firstname, middlename, lastname, age, salary, location)
 VALUES('Kapil', 'kumar', 'sharma', 
28, 10000, 'Bangalore');


INSERT INTO employee VALUES('Satish', 'kumar', 'sharma', 
28, 10000, 'Bangalore');  ---> Not recommended


INSERT INTO employee (firstname, lastname, age, salary, location)
VALUES ('rajesh"s', 'sharma', 28, 10000, 'Bangalore');


INSERT INTO employee(firstname,  lastname, age, salary, location)
 VALUES('rajesh\n's', 'sharma', 
28, 10000, 'Bangalore');



INSERT INTO employee(firstname, middlename, lastname, age, salary, location)
 VALUES('Kapil', 'kumar', 'sharma', 
28, 10000, 'Bangalore'),
('Sunil', 'kumar', 'sharma', 
28, 10000, 'Bangalore'),
('Mahesh', 'kumar', 'sharma', 
28, 10000, 'Bangalore'),
('Suresh', 'kumar', 'sharma', 
28, 10000, 'Bangalore'),
('Jignesh', 'kumar', 'sharma', 
28, 10000, 'Bangalore'),
('Rakesh', 'kumar', 'sharma', 
28, 10000, 'Bangalore');



INSERT INTO employee(firstname,  lastname, age, salary, location)
 VALUES('rajesh', 'sharma', 'twenty', 10000, 'Bangalore');



INSERT INTO employee(firstname,  lastname, age, salary, location)
 VALUES('adhhgadhjgsfasdfghdsgfjsdgfkjsdjk', 'sharma', 
28, 10000, 'Bangalore');



NULL --> Means Something Unknown --> 

INSERT INTO employee(lastname, age, salary, location)
 VALUES('sharma', 28, 10000, 'Bangalore');


So let's structure the table so no one could enter null value for firstname.


DROP TABLE employee;



CREATE TABLE employee (
firstname VARCHAR(20) NOT NULL,
middlename VARCHAR(20),
lastname VARCHAR(20) NOT NULL,
age INT NOT NULL,
salary INT NOT NULL,
location VARCHAR(20)
);    -- > Better Approach than the previous one

-- > Putting the right constraints into the play.

DESC employee;


-- > DEFAULT values

CREATE TABLE employee (
firstname VARCHAR(20) NOT NULL,
middlename VARCHAR(20),
lastname VARCHAR(20) NOT NULL,
age INT NOT NULL,
salary INT NOT NULL,
location VARCHAR(20)
);