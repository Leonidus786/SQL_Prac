



What is a database-- data base is a collection of data and holds the data in the form of tables.
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------


What is a table --- holds the data in form of rows and columns.
---------------------------------------------------------------
---------------------------------------------------------------


It is similar to excel spreadsheet.
-----------------------------------
-----------------------------------
When a excel spreadsheet holds the data in the same way why do we require this database?

Problem with excel spreadsheet is it what if let's say 1000s of spreadsheets which hold more than 100000s of data
it become very tidious and cumbersome and totally unmanageable to give insights to this huge data. This is why the better
 way is to have a database and it will provide you n number of other functionalities also.

-------------

The database provides us the capability to access and manipulate this data.
---------------------------------------------------------------------------
---------------------------------------------------------------------------


Because storing the data is not the only thing we should be able to interact with this data 
we should be able to retrieve the data we should be able to update or modify the data 
whatever we want we should be able to and these are the one of the capabalities which our database will provide us.





2 types of databases
----------------------
----------------------

1. Relational Database - A reletional database is the one in which we store the data 
in the form of   rows & columns and also the tables have relation between them.
For ex we might have employee id and departments table and each employee can have a department id 
which relate them to that employee table which means two tables will have some relation on them.
that's why we called it a relational database.

MySQL
SQL Server
PostgreSQL

SQLite
MariaDB

2. NOSQL Database -- is the one where we have a Key value, Document, Graph  
here the data is not stored in the form of rows and columns and also two tables do not have any relation in them

Hbase
Mongodb
Cassandra
------------------------

--------



why My sql

it is something which is used in lot of places. it is in very high demand that is why we are going to learn this 

what if anyone ask to work on sql server or postgreSQL I would say you would not have to really worry the sql staements 
learned with this class should work on other databases like sql server,  with minor changes.

------------------------------------------------------------------------
----------------------------------------------------------------------------


SQL ---> SQL stands for structure query language -
Because this language is used to work with structured data that is data in the form of rows and columns.

SQL is a language through which we are interacting with the databases.
So basically sql is a language through which you will be interacting with the databases.


For ex --- we have a mysql data and someone says write a query to insert the data.
or to update the record or to delete the record from their MySQL database  

So MySQL is a database and SQL is a way to interact with this database. You can say to communicate with the database.


--------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
SQL - s used to query a relational database.



goormide
Online -----https://ide.goorm.io/my/dashboard


create container

name mysql
region - india

select npde.js

install mysql
run container
 
enable mysql-ctl cli;      command ---pta karo
Windows: Press Ctrl + L to clear the MySQL command line on Windows systems. 
MacOS: Press Cmd + K to clear the MySQL command line on MacOS. 
Linux: Press Ctrl + L to clear the MySQL command line on Linux



SHOW DATABASES;

CREATE DATABASE ITPLC;

DROP DATABASE ITPLC;

USE ITPLC

SELECT DATABASE

CREATE TABLE employee
(
name VARCHAR(30),
age INT,
salary FLOAT
);


SHOW TABLES;

------------------------------------------------------------------
-------------------------------------------------------------------

DESCRIBE employee; ---- gives structure of the table 

even 

DESC employee;

Will work the same way. -- type less


 
DROP TABLE employee;

SHOW TABLE;
---------------------------------------------------------


DATABASE is for storing the data
Relational vs NOSQL database ---> 
SQL
MySQL vs  SQL
we get some pratcise to how to create a database and how to create a table, Basic data types,
DROP TABLE, DROP DATABASE, DESCRIBE.



-------------------------------------------------
---------------------------------------------------

CRUD Operations 

that means when we have created a table:
create --> means creating the new records.--> INSERT statement
read -->  once the data is in the table we are reading it --> SELECT statements
update --> means updating the record --> UPDATE statements
delete --> means deleting a record --> DELETE statements

 


Creation of table and insert statements.

Now Consider you are a small startup and you ae looking to hire some employees and 
you want to have an employee table to manage their database.

So You are looking to have a employee table and now you are a Ahmedabad  based startup in India 
and you your preference is to hire more employees from Ahmedabad that's what you want you prefer 
to hire employee from Ahmedabad location. That is the one preference that you have for example.
Now what table structure you can keep I mean there can be a lot of fields in the table but let's keep it simple 


we can create a table for example create table okay so basically we will keep the table structure simple and then we will 
refine it later so when you hire employees. Employee might have a first name, last name, middlename, and apart from that you 
want to capture the age, salary and you might capture the location. So let's begin with this.
to start with this is good enough to create table, table name. CREATE TABLE is the keyword that's why it's preferred that
you keep it in uppercase but it's not that if you put it in lowercase you get error no but recommended that you put in uppercase
for your reference so that you follow

for firstname what will be the datatype, this is like a string so it will be VARCHAR we can say 255 characters ideally 255 is not 
required because we know it won't consume 255 characters so we can keep it lt's say 20 characters similarly for middle and lastname
because all of this is string type, age you know it's numeric so this will be integer salary is also numeric location is again varchar and will say 20 characters
good enough so let me take this and go to my terminal you know how to reach to this we are using goorm ide and now I'll say 

SHOW DATABAES;

I want to give a fresh start because there will be some tables which are already there
so I'll drop the database  and recreate it.

DROP DATABASE itplc;


CREATE DATABASE itplc;

SHOW DATABASES; show I should be able to see itplc as one of the database I'll say use itplc so that I go inside this

NOW let me create the table that we have in the definition we have written by the way just for your understanding this command 
is called as a ddl DATA DEFINITION LANGUAGE because we are doing something with definition rather than data this is called ddl and we see 
I'll talk about ddl and dml later do not worry but since it came I just brought that.

 
CREATE TABLE employee (
firstname VARCHAR(20),
middlename VARCHAR(20),
lastname VARCHAR(20),
age INT,
salary INT,
location VARCHAR(20)
);
------- THIS is called DDL- data definition language.


We have created this table now. with all of these columns looks perfect let me clear the screen and say 

SHOW TABLES;

I should be able to see employee table now let me see the structure of it


I am able to see all column names and data types and null yes default value I'll talk more about it what does it mean 
so there are other things too which we will talk in a while  now we have created a table which is empty right now
how do you see the data inside a table using select command 


SELECT * FROM employee;

There are no records inside it that's why we see empty set 

okay now let me insert some records how do I do that 

let's say insert into employee means insert into table name now if you follow right practice make it caps 



INSERT INTO employee VALUES('Satish', 'kumar', 'sharma', 
28, 10000, 'Bangalore');

name take satish and location is from Bengaluru. and run but let me tell you one good practice that it is not must but
it is recommended that you give the list of column names here so for example 
insert into employee and then you give this (firstname, middlename ) 



INSERT INTO employee(firstname, middlename, lastname, age, salary, location)
 VALUES('Kapil', 'kumar', 'sharma', 
28, 10000, 'Bangalore');

this is how we should be proceeding now let me try running this and see if it works
done I am able to insert a record now let me go back and create one more insert command mmand 
and I won't put this list here and let me make slight difference in the value let's say instead of 


INSERT INTO employee VALUES('Satish', 'kumar', 'sharma', 
28, 10000, 'Bangalore');

having understood this let's try to do a select on this table 
and my command i Want to run is 

SELECT * FROM employee;


 and I can see both the records are there  just have a look now what if I donot want to insert  data for all
columns let's say someone do not have a middle name now make a copy of insert command and then what i would say here
I do not want to give the middle name because lot of people do not have a middlename I do not have for example first name lastname age salary
location 

INSERT INTO employee(firstname, lastname, age, salary, location)
 VALUES('rajesh', 'sharma', 
32, 30000, 'Bangalore');

It is inserted. We have not given the value of middle name now if you would have done the same without bringing this list
into play for example what 




INSERT INTO employee VALUES('rajesh', 'sharma', 
28, 10000, 'Bangalore');

this would definitely give an error because when you are not mentioning the list of column names then you should be giving  all 
of the values for all columns in your table



INSERT INTO employee VALUES('Satish', 'kumar', 'sharma', 
28, 10000, 'Bangalore');  ---> Not recommended


INSERT INTO employee (firstname, lastname, age, salary, location)
VALUES ('rajesh"s', 'sharma', 28, 10000, 'Bangalore');


INSERT INTO employee(firstname,  lastname, age, salary, location)
 VALUES('rajesh\n's', 'sharma', 
28, 10000, 'Bangalore');



INSERT INTO employee(firstname, middlename, lastname, age, salary, location)
 VALUES('Kapil', 'kumar', 'sharma', 
28, 10000, 'Bangalore'),
('Sunil', 'kumar', 'sharma', 
28, 10000, 'Bangalore'),
('Mahesh', 'kumar', 'sharma', 
28, 10000, 'Bangalore'),
('Suresh', 'kumar', 'sharma', 
28, 10000, 'Bangalore'),
('Jignesh', 'kumar', 'sharma', 
28, 10000, 'Bangalore'),
('Rakesh', 'kumar', 'sharma', 
28, 10000, 'Bangalore');



INSERT INTO employee(firstname,  lastname, age, salary, location)
 VALUES('rajesh', 'sharma', 'twenty', 10000, 'Bangalore');



INSERT INTO employee(firstname,  lastname, age, salary, location)
 VALUES('adhhgadhjgsfasdfghdsgfjsdgfkjsdjk', 'sharma', 
28, 10000, 'Bangalore');



NULL --> Means Something Unknown --> 

INSERT INTO employee(lastname, age, salary, location)
 VALUES('sharma', 28, 10000, 'Bangalore');


So let's structure the table so no one could enter null value for firstname.


DROP TABLE employee;



CREATE TABLE employee (
firstname VARCHAR(20) NOT NULL,
middlename VARCHAR(20),
lastname VARCHAR(20) NOT NULL,
age INT NOT NULL,
salary INT NOT NULL,
location VARCHAR(20)
);    -- > Better Approach than the previous one

-- > Putting the right constraints into the play.

DESC employee;


-- > DEFAULT values

CREATE TABLE employee (
firstname VARCHAR(20) NOT NULL,
middlename VARCHAR(20),
lastname VARCHAR(20) NOT NULL,
age INT NOT NULL,
salary INT NOT NULL,
location VARCHAR(20)
);